; omult7.a
; from APPLE II Elite, https://6502disassembly.com/a2-elite/Elite.html#SymFMLTU
; uses log and exp tables to get an approximate result (not more than 6 wrong)
;
; 8 bit x 8 bit unsigned multiply, 8 bit approximate high byte of result
; Average cycles: 46.72
; 802 bytes


* = $0200

multipler = $02     ; Q
temp_a    = $03

log
    !byte $08,$00,$20,$32,$40,$4a,$52,$59,$60,$65,$6a,$6e,$72,$76,$79,$7d
    !byte $80,$82,$85,$87,$8a,$8c,$8e,$90,$92,$94,$96,$98,$99,$9b,$9d,$9e
    !byte $a0,$a1,$a2,$a4,$a5,$a6,$a7,$a9,$aa,$ab,$ac,$ad,$ae,$af,$b0,$b1
    !byte $b2,$b3,$b4,$b5,$b6,$b7,$b8,$b9,$b9,$ba,$bb,$bc,$bd,$bd,$be,$bf
    !byte $c0,$c0,$c1,$c2,$c2,$c3,$c4,$c4,$c5,$c6,$c6,$c7,$c7,$c8,$c9,$c9
    !byte $ca,$ca,$cb,$cc,$cc,$cd,$cd,$ce,$ce,$cf,$cf,$d0,$d0,$d1,$d1,$d2
    !byte $d2,$d3,$d3,$d4,$d4,$d5,$d5,$d5,$d6,$d6,$d7,$d7,$d8,$d8,$d9,$d9
    !byte $d9,$da,$da,$db,$db,$db,$dc,$dc,$dd,$dd,$dd,$de,$de,$de,$df,$df
    !byte $e0,$e0,$e0,$e1,$e1,$e1,$e2,$e2,$e2,$e3,$e3,$e3,$e4,$e4,$e4,$e5
    !byte $e5,$e5,$e6,$e6,$e6,$e7,$e7,$e7,$e7,$e8,$e8,$e8,$e9,$e9,$e9,$ea
    !byte $ea,$ea,$ea,$eb,$eb,$eb,$ec,$ec,$ec,$ec,$ed,$ed,$ed,$ed,$ee,$ee
    !byte $ee,$ee,$ef,$ef,$ef,$ef,$f0,$f0,$f0,$f1,$f1,$f1,$f1,$f1,$f2,$f2
    !byte $f2,$f2,$f3,$f3,$f3,$f3,$f4,$f4,$f4,$f4,$f5,$f5,$f5,$f5,$f5,$f6
    !byte $f6,$f6,$f6,$f7,$f7,$f7,$f7,$f7,$f8,$f8,$f8,$f8,$f9,$f9,$f9,$f9
    !byte $f9,$fa,$fa,$fa,$fa,$fa,$fb,$fb,$fb,$fb,$fb,$fc,$fc,$fc,$fc,$fc
    !byte $fd,$fd,$fd,$fd,$fd,$fd,$fe,$fe,$fe,$fe,$fe,$ff,$ff,$ff,$ff,$ff

logL
    !byte $03,$00,$00,$b8,$00,$4d,$b8,$d6,$00,$70,$4d,$b4,$b8,$6a,$d6,$05
    !byte $00,$cc,$70,$ef,$4d,$8e,$b4,$c1,$b8,$9a,$6a,$28,$d6,$75,$05,$89
    !byte $00,$6c,$cc,$23,$70,$b4,$ef,$22,$4d,$71,$8e,$a4,$b4,$bd,$c1,$bf
    !byte $b8,$ac,$9a,$85,$6a,$4b,$28,$01,$d6,$a7,$75,$3f,$05,$c9,$89,$46
    !byte $00,$b7,$6c,$1d,$cc,$79,$23,$cb,$70,$13,$b4,$52,$ef,$8a,$22,$b9
    !byte $4d,$e0,$71,$00,$8e,$1a,$a4,$2d,$b4,$39,$bd,$40,$c1,$41,$bf,$3c
    !byte $b8,$32,$ac,$24,$9a,$10,$85,$f8,$6a,$db,$4b,$ba,$28,$95,$01,$6c
    !byte $d6,$3f,$a7,$0e,$75,$da,$3f,$a2,$05,$67,$c9,$29,$89,$e8,$46,$a3
    !byte $00,$5c,$b7,$12,$6c,$c5,$1d,$75,$cc,$23,$79,$ce,$23,$77,$cb,$1e
    !byte $70,$c2,$13,$64,$b4,$03,$52,$a1,$ef,$3d,$8a,$d6,$22,$6e,$b9,$03
    !byte $4d,$97,$e0,$29,$71,$b9,$00,$47,$8e,$d4,$1a,$5f,$a4,$e8,$2d,$70
    !byte $b4,$f7,$39,$7b,$bd,$ff,$40,$81,$c1,$01,$41,$80,$bf,$fe,$3c,$7a
    !byte $b8,$f5,$32,$6f,$ac,$e8,$24,$5f,$9a,$d5,$10,$4a,$85,$be,$f8,$31
    !byte $6a,$a3,$db,$13,$4b,$83,$ba,$f1,$28,$5f,$95,$cb,$01,$36,$6c,$a1
    !byte $d6,$0a,$3f,$73,$a7,$db,$0e,$42,$75,$a7,$da,$0c,$3f,$71,$a2,$d4
    !byte $05,$36,$67,$98,$c9,$f9,$29,$59,$89,$b8,$e8,$17,$46,$75,$a3,$d2

antilog
    !byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
    !byte $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$01
    !byte $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
    !byte $02,$02,$02,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03
    !byte $04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$05,$05,$05,$05,$05
    !byte $05,$05,$05,$06,$06,$06,$06,$06,$06,$06,$07,$07,$07,$07,$07,$07
    !byte $08,$08,$08,$08,$08,$08,$09,$09,$09,$09,$09,$0a,$0a,$0a,$0a,$0b
    !byte $0b,$0b,$0b,$0c,$0c,$0c,$0c,$0d,$0d,$0d,$0e,$0e,$0e,$0e,$0f,$0f
    !byte $10,$10,$10,$11,$11,$11,$12,$12,$13,$13,$13,$14,$14,$15,$15,$16
    !byte $16,$17,$17,$18,$18,$19,$19,$1a,$1a,$1b,$1c,$1c,$1d,$1d,$1e,$1f
    !byte $20,$20,$21,$22,$22,$23,$24,$25,$26,$26,$27,$28,$29,$2a,$2b,$2c
    !byte $2d,$2e,$2f,$30,$31,$32,$33,$34,$35,$36,$38,$39,$3a,$3b,$3d,$3e
    !byte $40,$41,$42,$44,$45,$47,$48,$4a,$4c,$4d,$4f,$51,$52,$54,$56,$58
    !byte $5a,$5c,$5e,$60,$62,$64,$67,$69,$6b,$6d,$70,$72,$75,$77,$7a,$7d
    !byte $80,$82,$85,$88,$8b,$8e,$91,$94,$98,$9b,$9e,$a2,$a5,$a9,$ad,$b1
    !byte $b5,$b8,$bd,$c1,$c5,$c9,$ce,$d2,$d7,$db,$e0,$e5,$ea,$ef,$f5,$fa

; A = A * multiplier / 256
FMLTU
;    stx remember_x
    sta temp_a
    tax
    beq load_x_exit
    lda logL,x
    ldx multipler
    beq load_ax_exit
    clc
    adc logL,x
    lda log,x
    ldx temp_a
    adc log,x
    bcc load_ax_exit
    tax
    lda antilog,x
;    ldx remember_x
    rts

load_ax_exit
    lda #0
load_x_exit
;    ldx remember_x
    rts
